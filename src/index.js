/**
 * Auth Service
 * This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including 'user', 'admin', 'moderator', 'guest', and 'superadmin'.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ClientGet200Response from './model/ClientGet200Response';
import ClientGet401Response from './model/ClientGet401Response';
import LoginClientPost200Response from './model/LoginClientPost200Response';
import LoginClientPost401Response from './model/LoginClientPost401Response';
import RegenerateClientCredentialsPost200Response from './model/RegenerateClientCredentialsPost200Response';
import RegisterPost201Response from './model/RegisterPost201Response';
import RegisterPost400Response from './model/RegisterPost400Response';
import RegisterPost500Response from './model/RegisterPost500Response';
import DefaultApi from './api/DefaultApi';


/**
* This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including &#39;user&#39;, &#39;admin&#39;, &#39;moderator&#39;, &#39;guest&#39;, and &#39;superadmin&#39;..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AuthService = require('index'); // See note below*.
* var xxxSvc = new AuthService.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AuthService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AuthService.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AuthService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ClientGet200Response model constructor.
     * @property {module:model/ClientGet200Response}
     */
    ClientGet200Response,

    /**
     * The ClientGet401Response model constructor.
     * @property {module:model/ClientGet401Response}
     */
    ClientGet401Response,

    /**
     * The LoginClientPost200Response model constructor.
     * @property {module:model/LoginClientPost200Response}
     */
    LoginClientPost200Response,

    /**
     * The LoginClientPost401Response model constructor.
     * @property {module:model/LoginClientPost401Response}
     */
    LoginClientPost401Response,

    /**
     * The RegenerateClientCredentialsPost200Response model constructor.
     * @property {module:model/RegenerateClientCredentialsPost200Response}
     */
    RegenerateClientCredentialsPost200Response,

    /**
     * The RegisterPost201Response model constructor.
     * @property {module:model/RegisterPost201Response}
     */
    RegisterPost201Response,

    /**
     * The RegisterPost400Response model constructor.
     * @property {module:model/RegisterPost400Response}
     */
    RegisterPost400Response,

    /**
     * The RegisterPost500Response model constructor.
     * @property {module:model/RegisterPost500Response}
     */
    RegisterPost500Response,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
