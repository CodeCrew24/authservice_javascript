/**
 * Auth Service
 * This API provides token-based authentication for user registration, login, and client credential management. It ensures secure communication by utilizing tokens for authentication. Users can register with unique usernames and passwords, authenticate using client credentials, retrieve client IDs and secrets, and regenerate client credentials as needed. The API supports various user roles, including 'user', 'admin', 'moderator', 'guest', and 'superadmin'. Token is valid for 12hrs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientGet200Response from '../model/ClientGet200Response';
import ClientGet401Response from '../model/ClientGet401Response';
import LoginClientPost200Response from '../model/LoginClientPost200Response';
import LoginClientPost401Response from '../model/LoginClientPost401Response';
import RegenerateClientCredentialsPost200Response from '../model/RegenerateClientCredentialsPost200Response';
import RegisterPost201Response from '../model/RegisterPost201Response';
import RegisterPost400Response from '../model/RegisterPost400Response';
import RegisterPost500Response from '../model/RegisterPost500Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientGet operation.
     * @callback module:api/DefaultApi~clientGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client ID and secret
     * Returns the client ID and client secret of the user associated with the provided username and password.
     * @param {String} username User's username
     * @param {String} password User's password
     * @param {module:api/DefaultApi~clientGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientGet200Response}
     */
    clientGet(username, password, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling clientGet");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling clientGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'username': username,
        'password': password
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientGet200Response;
      return this.apiClient.callApi(
        '/client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginClientPost operation.
     * @callback module:api/DefaultApi~loginClientPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginClientPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs in a user using client ID and secret
     * Authenticates a user with the provided client ID and secret. Returns a JWT token, token type (Bearer), and expiry time in seconds.
     * @param {String} clientId User's client ID
     * @param {String} clientSecret User's client secret
     * @param {module:api/DefaultApi~loginClientPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginClientPost200Response}
     */
    loginClientPost(clientId, clientSecret, callback) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling loginClientPost");
      }
      // verify the required parameter 'clientSecret' is set
      if (clientSecret === undefined || clientSecret === null) {
        throw new Error("Missing the required parameter 'clientSecret' when calling loginClientPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'clientId': clientId,
        'clientSecret': clientSecret
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginClientPost200Response;
      return this.apiClient.callApi(
        '/login/client', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateClientCredentialsPost operation.
     * @callback module:api/DefaultApi~regenerateClientCredentialsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegenerateClientCredentialsPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate client credentials
     * Regenerates the client ID and client secret of the user associated with the provided username and password. Returns the new client ID and client secret in the response.
     * @param {String} username User's username
     * @param {String} password User's password
     * @param {module:api/DefaultApi~regenerateClientCredentialsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegenerateClientCredentialsPost200Response}
     */
    regenerateClientCredentialsPost(username, password, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling regenerateClientCredentialsPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling regenerateClientCredentialsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'username': username,
        'password': password
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegenerateClientCredentialsPost200Response;
      return this.apiClient.callApi(
        '/regenerate-client-credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerPost operation.
     * @callback module:api/DefaultApi~registerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterPost201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a new user
     * Creates a new user with the provided username, password, and role. Returns the generated client ID and client secret in the response.
     * @param {String} username Unique username for the user
     * @param {String} password User's password
     * @param {module:model/String} role 
     * @param {module:api/DefaultApi~registerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterPost201Response}
     */
    registerPost(username, password, role, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling registerPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling registerPost");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling registerPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'username': username,
        'password': password,
        'role': role
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegisterPost201Response;
      return this.apiClient.callApi(
        '/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
